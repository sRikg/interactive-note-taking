"An attention function can be described as mapping a query and a set of key-value pairs to an output, where the query, keys, values, and output are all vectors. The output is computed as a weighted sum of the values, where the weight assigned to each value is computed by a compatibility function of the query with the corresponding key. We call our particular attention \"Scaled Dot-Product Attention\" (Figure\u00a02). The input consists of queries and keys of dimension d_(k), and values of dimension d_(v). We compute the dot products of the query with all keys, divide each by $\\sqrt{d_{k}}$, and apply a softmax function to obtain the weights on the values. In practice, we compute the attention function on a set of queries simultaneously, packed together into a matrix Q. The keys and values are also packed together into matrices K and V. We compute the matrix of outputs as:   -- -------------------------------------------------------------------------- -- -----      $${{Attention}{(Q,K,V)}} = {{softmax}{(\\frac{QK^{T}}{\\sqrt{d_{k}}})}V}$$      (1) The two most commonly used attention functions are additive attention (bahdanau2014neural, ), and dot-product (multiplicative) attention. Dot-product attention is identical to our algorithm, except for the scaling factor of $\\frac{1}{\\sqrt{d_{k}}}$. Additive attention computes the compatibility function using a feed-forward network with a single hidden layer. While the two are similar in theoretical complexity, dot-product attention is much faster and more space-efficient in practice, since it can be implemented using highly optimized matrix multiplication code. While for small values of d_(k) the two mechanisms perform similarly, additive attention outperforms dot product attention without scaling for larger values of d_(k) (DBLP:journals/corr/BritzGLL17, ). We suspect that for large values of d_(k), the dot products grow large in magnitude, pushing the softmax function into regions where it has extremely small gradients \u00b9\u00b91To illustrate why the dot products get large, assume that the components of q and k are independent random variables with mean 0 and variance 1. Then their dot product, ${q \\cdot k} = {\\sum_{i = 1}^{d_{k}}{q_{i}k_{i}}}$, has mean 0 and variance d_(k).. To counteract this effect, we scale the dot products by $\\frac{1}{\\sqrt{d_{k}}}$."

